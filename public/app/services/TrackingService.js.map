{"version":3,"sources":["../../src/app/services/TrackingService.ts"],"names":[],"mappings":"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","file":"TrackingService.js","sourcesContent":["/**\r\n * Created by hiepl on 6/24/2017.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport {MyMarker, LocationObj} from \"../map/models/marker\";\r\nimport {Http, Response} from \"@angular/http\";\r\nimport 'rxjs/add/operator/toPromise';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport {Location} from \"../map/models/Location\";\r\n\r\n\r\n@Injectable()\r\nexport class TrackingService {\r\n    constructor (private http: Http) {}\r\n    urlLocation: string = \"/tracking/get-locations\";\r\n    getLocations(url : string, lastPoint : Location): Promise<any> {\r\n        //send to server in order to know which location that we returned\r\n        return this.http.post(url, {\"lastPoint\":lastPoint}).toPromise()\r\n            .then(this.extractData)\r\n            .catch(this.handleError);\r\n    };\r\n    private extractData(value: Response) {\r\n        let body = value.json();\r\n        let locationObject : LocationObj;\r\n        if ( body.status ) {\r\n            let markers = {};\r\n            for (let i = 0; i < body.data.length; i++) {\r\n                let temp = body.data[i];\r\n                let marker : MyMarker = {\r\n                    deviceId : temp.device_id,\r\n                    deviceNumber : temp.device_number,\r\n                    currentLocation : null,\r\n                    visible : true,\r\n                    locations : []\r\n                };\r\n                let locs : Location[] = [];\r\n                for (let j = 0; j < temp.locations.length; j++) {\r\n                    let loc = temp.locations[j];\r\n                    let newLoc : Location = {\r\n                        lat : parseFloat(loc.lat),\r\n                        lng : parseFloat(loc.lng),\r\n                        state : 'N/A',\r\n                        status : (loc.status > 0 ? 'On' : 'Off'),\r\n                        time : loc.created_at,\r\n                        velocity: loc.velocity,\r\n                    };\r\n                    locs.push(newLoc);\r\n                    if ( i === 0 ) {\r\n                        marker.currentLocation = loc;\r\n                    }\r\n                };\r\n                marker.locations = locs;\r\n                markers[temp.device_id] = marker;\r\n            }\r\n            locationObject = {\r\n                markers : markers,\r\n                lastPoint : body.last_points\r\n            };\r\n            console.log(locationObject, 'locationObject');\r\n            return locationObject;\r\n        }\r\n        return [];\r\n    };\r\n    handleError() : void {};\r\n}"],"sourceRoot":"/src"}